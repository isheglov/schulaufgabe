name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend:
    name: Frontend (Next.js/TypeScript)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Run TypeScript type check
        run: npx tsc --noEmit
      - name: Run ESLint
        run: npx eslint . --ext .ts,.tsx
      - name: Build Next.js app
        run: npm run build

  backend:
    name: Backend (Python/FastAPI)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run flake8 (linter)
        run: |
          pip install flake8
          flake8 backend/
      - name: Set test environment variables
        run: echo "GOOGLE_API_KEY=dummy" >> $GITHUB_ENV
      - name: Run backend tests
        run: pytest backend/tests

  e2e:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Start backend
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r backend/requirements.txt
          # Set necessary environment variables
          echo "GOOGLE_API_KEY=dummy" > backend/.env
          # Change to the project root and run uvicorn directly
          cd /home/runner/work/schulaufgabe/schulaufgabe
          python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          # Wait briefly for the server to initialize
          sleep 3
        shell: bash
      - name: Start frontend
        run: |
          npm run build
          npm run start &
        shell: bash
      - name: Wait for services
        run: |
          # Check if services are running
          ps aux | grep uvicorn
          ps aux | grep next
          # Increase timeout and try multiple protocols
          npx wait-on --timeout 180000 --interval 2000 --verbose http://localhost:3000 http://localhost:8000 http://127.0.0.1:8000
      - name: Run Playwright tests
        run: npx playwright test 